# Docker Compose para PsychoManager - Produção

services:
  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:18.0-alpine
    container_name: psycho-postgres-prod
    environment:
      POSTGRES_DB: psycho_manager
      POSTGRES_USER: psycho_manager
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-psycho_manager_prod}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    networks:
      - psycho-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U psycho_manager -d psycho_manager"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Backend Quarkus para produção
  backend:
    image: psycho-manager-backend:latest
    container_name: psycho-backend-prod
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/psycho_manager
      QUARKUS_DATASOURCE_USERNAME: psycho_manager
      QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-psycho_manager_prod}
      QUARKUS_HTTP_CORS_ORIGINS: ${FRONTEND_URL:-http://localhost:3000}
      QUARKUS_HTTP_CORS_HEADERS: accept,authorization,content-type,x-requested-with
      QUARKUS_HTTP_CORS_METHODS: GET,POST,PUT,DELETE,OPTIONS
      PSYCHO_MANAGER_PDF_PATH: /app/uploads/pdfs
      PSYCHO_MANAGER_TIMEZONE: America/Sao_Paulo
      QUARKUS_LOG_LEVEL: INFO
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC -XX:+UseStringDeduplication"
    volumes:
      - uploads_data_prod:/app/uploads
      - ./logs:/app/logs
    networks:
      - psycho-network-prod
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/q/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 1G

  # Frontend React para produção
  frontend:
    image: psycho-manager-frontend:latest
    container_name: psycho-frontend-prod
    networks:
      - psycho-network-prod
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx como proxy reverso para produção
  nginx:
    image: nginx:alpine
    container_name: psycho-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - psycho-network-prod
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup do banco de dados
  backup:
    image: postgres:18.0-alpine
    container_name: psycho-backup
    environment:
      POSTGRES_DB: psycho_manager
      POSTGRES_USER: psycho_manager
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-psycho_manager_prod}
      PGPASSWORD: ${POSTGRES_PASSWORD:-psycho_manager_prod}
    volumes:
      - ./backups:/backups
    networks:
      - psycho-network-prod
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U psycho_manager psycho_manager > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name 'backup_*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    restart: unless-stopped
    depends_on:
      - postgres

volumes:
  postgres_data_prod:
    driver: local
  uploads_data_prod:
    driver: local

networks:
  psycho-network-prod:
    driver: bridge
